:mod:`ethereum.dao_fork.vm.interpreter`
=======================================

.. py:module:: ethereum.dao_fork.vm.interpreter

Ethereum Virtual Machine (EVM) Interpreter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

A straightforward interpreter that executes EVM code.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.dao_fork.vm.interpreter.process_message_call
   ethereum.dao_fork.vm.interpreter.process_create_message
   ethereum.dao_fork.vm.interpreter.process_message
   ethereum.dao_fork.vm.interpreter.execute_code



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.dao_fork.vm.interpreter.STACK_DEPTH_LIMIT


Module Details
---------------

STACK_DEPTH_LIMIT
~~~~~~~~~~~~~~~~~



.. py:data:: STACK_DEPTH_LIMIT

   

.. undocinclude:: /../src/ethereum/dao_fork/vm/interpreter.py
   :language: python
   :lines: 46-46


process_message_call
~~~~~~~~~~~~~~~~~~~~


.. function:: process_message_call(message: ethereum.dao_fork.vm.Message, env: ethereum.dao_fork.vm.Environment) -> Tuple[ethereum.base_types.U256, ethereum.base_types.U256, Union[Tuple[], Tuple[ethereum.dao_fork.eth_types.Log, Ellipsis]], Set[ethereum.dao_fork.eth_types.Address], bool]
   :noindexentry:

   If `message.current` is empty then it creates a smart contract
   else it executes a call from the `message.caller` to the `message.target`.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **output** --

             A tuple of the following:

               1. `gas_left`: remaining gas after execution.
               2. `refund_counter`: gas to refund after execution.
               3. `logs`: list of `Log` generated during execution.
               4. `accounts_to_delete`: Contracts which have self-destructed.
               5. `has_erred`: True if execution has caused an error.
   :rtype: `Tuple`




.. undocinclude:: /../src/ethereum/dao_fork/vm/interpreter.py
   :language: python
   :pyobject: process_message_call

process_create_message
~~~~~~~~~~~~~~~~~~~~~~


.. function:: process_create_message(message: ethereum.dao_fork.vm.Message, env: ethereum.dao_fork.vm.Environment) -> ethereum.dao_fork.vm.Evm
   :noindexentry:

   Executes a call to create a smart contract.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects.
   :rtype: :py:class:`~ethereum.dao_fork.vm.Evm`




.. undocinclude:: /../src/ethereum/dao_fork/vm/interpreter.py
   :language: python
   :pyobject: process_create_message

process_message
~~~~~~~~~~~~~~~


.. function:: process_message(message: ethereum.dao_fork.vm.Message, env: ethereum.dao_fork.vm.Environment) -> ethereum.dao_fork.vm.Evm
   :noindexentry:

   Executes a call to create a smart contract.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects
   :rtype: :py:class:`~ethereum.dao_fork.vm.Evm`




.. undocinclude:: /../src/ethereum/dao_fork/vm/interpreter.py
   :language: python
   :pyobject: process_message

execute_code
~~~~~~~~~~~~


.. function:: execute_code(message: ethereum.dao_fork.vm.Message, env: ethereum.dao_fork.vm.Environment) -> ethereum.dao_fork.vm.Evm
   :noindexentry:

   Executes bytecode present in the `message`.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects
   :rtype: `ethereum.vm.EVM`




.. undocinclude:: /../src/ethereum/dao_fork/vm/interpreter.py
   :language: python
   :pyobject: execute_code
