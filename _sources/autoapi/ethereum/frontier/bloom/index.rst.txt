:mod:`ethereum.frontier.bloom`
==============================

.. py:module:: ethereum.frontier.bloom

Ethereum Logs Bloom
^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

This modules defines functions for calculating bloom filters of logs. For the
general theory of bloom filters see e.g. `Wikipedia
<https://en.wikipedia.org/wiki/Bloom_filter>`_. Bloom filters are used to allow
for efficient searching of logs by address and/or topic, by rapidly
eliminating blocks and reciepts from their search.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.frontier.bloom.add_to_bloom
   ethereum.frontier.bloom.logs_bloom



Module Details
---------------

add_to_bloom
~~~~~~~~~~~~


.. function:: add_to_bloom(bloom: bytearray, bloom_entry: bytes) -> None
   :noindexentry:

   Add a bloom entry to the bloom filter (`bloom`).

   The number of hash functions used is 3. They are calculated by taking the
   least significant 11 bits from the first 3 16-bit words of the
   `keccak_256()` hash of `bloom_entry`.

   :param bloom: The bloom filter.
   :param bloom_entry: An entry which is to be added to bloom filter.




.. undocinclude:: /../src/ethereum/frontier/bloom.py
   :language: python
   :pyobject: add_to_bloom

logs_bloom
~~~~~~~~~~


.. function:: logs_bloom(logs: Tuple[ethereum.frontier.eth_types.Log, Ellipsis]) -> ethereum.frontier.eth_types.Bloom
   :noindexentry:

   Calculate the Bloom filter for a set of logs.

   The address and each topic of a log are added to the bloom filter.

   :param logs: List of logs for which the logs bloom is to be calculated.

   :returns: **logs_bloom** -- The logs bloom calculated which is 256 bytes with some bits set as per
             the caller address and the log topics.
   :rtype: `Bloom`




.. undocinclude:: /../src/ethereum/frontier/bloom.py
   :language: python
   :pyobject: logs_bloom
