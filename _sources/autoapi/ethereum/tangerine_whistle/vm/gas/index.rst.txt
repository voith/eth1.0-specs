:mod:`ethereum.tangerine_whistle.vm.gas`
========================================

.. py:module:: ethereum.tangerine_whistle.vm.gas

Ethereum Virtual Machine (EVM) Gas
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

EVM gas constants and calculators.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.tangerine_whistle.vm.gas.subtract_gas
   ethereum.tangerine_whistle.vm.gas.calculate_memory_gas_cost
   ethereum.tangerine_whistle.vm.gas.calculate_gas_extend_memory
   ethereum.tangerine_whistle.vm.gas.calculate_call_gas_cost
   ethereum.tangerine_whistle.vm.gas.calculate_message_call_gas_stipend
   ethereum.tangerine_whistle.vm.gas.max_message_call_gas



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.tangerine_whistle.vm.gas.GAS_JUMPDEST
   ethereum.tangerine_whistle.vm.gas.GAS_BASE
   ethereum.tangerine_whistle.vm.gas.GAS_VERY_LOW
   ethereum.tangerine_whistle.vm.gas.GAS_SLOAD
   ethereum.tangerine_whistle.vm.gas.GAS_STORAGE_SET
   ethereum.tangerine_whistle.vm.gas.GAS_STORAGE_UPDATE
   ethereum.tangerine_whistle.vm.gas.GAS_STORAGE_CLEAR_REFUND
   ethereum.tangerine_whistle.vm.gas.GAS_LOW
   ethereum.tangerine_whistle.vm.gas.GAS_MID
   ethereum.tangerine_whistle.vm.gas.GAS_HIGH
   ethereum.tangerine_whistle.vm.gas.GAS_EXPONENTIATION
   ethereum.tangerine_whistle.vm.gas.GAS_MEMORY
   ethereum.tangerine_whistle.vm.gas.GAS_KECCAK256
   ethereum.tangerine_whistle.vm.gas.GAS_KECCAK256_WORD
   ethereum.tangerine_whistle.vm.gas.GAS_COPY
   ethereum.tangerine_whistle.vm.gas.GAS_BLOCK_HASH
   ethereum.tangerine_whistle.vm.gas.GAS_EXTERNAL
   ethereum.tangerine_whistle.vm.gas.GAS_BALANCE
   ethereum.tangerine_whistle.vm.gas.GAS_LOG
   ethereum.tangerine_whistle.vm.gas.GAS_LOG_DATA
   ethereum.tangerine_whistle.vm.gas.GAS_LOG_TOPIC
   ethereum.tangerine_whistle.vm.gas.GAS_CREATE
   ethereum.tangerine_whistle.vm.gas.GAS_CODE_DEPOSIT
   ethereum.tangerine_whistle.vm.gas.GAS_ZERO
   ethereum.tangerine_whistle.vm.gas.GAS_CALL
   ethereum.tangerine_whistle.vm.gas.GAS_NEW_ACCOUNT
   ethereum.tangerine_whistle.vm.gas.GAS_CALL_VALUE
   ethereum.tangerine_whistle.vm.gas.GAS_CALL_STIPEND
   ethereum.tangerine_whistle.vm.gas.GAS_SELF_DESTRUCT
   ethereum.tangerine_whistle.vm.gas.GAS_SELF_DESTRUCT_NEW_ACCOUNT
   ethereum.tangerine_whistle.vm.gas.REFUND_SELF_DESTRUCT
   ethereum.tangerine_whistle.vm.gas.GAS_ECRECOVER
   ethereum.tangerine_whistle.vm.gas.GAS_SHA256
   ethereum.tangerine_whistle.vm.gas.GAS_SHA256_WORD
   ethereum.tangerine_whistle.vm.gas.GAS_RIPEMD160
   ethereum.tangerine_whistle.vm.gas.GAS_RIPEMD160_WORD
   ethereum.tangerine_whistle.vm.gas.GAS_IDENTITY
   ethereum.tangerine_whistle.vm.gas.GAS_IDENTITY_WORD


Module Details
---------------

GAS_JUMPDEST
~~~~~~~~~~~~



.. py:data:: GAS_JUMPDEST

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 20-20


GAS_BASE
~~~~~~~~



.. py:data:: GAS_BASE

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 21-21


GAS_VERY_LOW
~~~~~~~~~~~~



.. py:data:: GAS_VERY_LOW

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 22-22


GAS_SLOAD
~~~~~~~~~



.. py:data:: GAS_SLOAD

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 23-23


GAS_STORAGE_SET
~~~~~~~~~~~~~~~



.. py:data:: GAS_STORAGE_SET

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 24-24


GAS_STORAGE_UPDATE
~~~~~~~~~~~~~~~~~~



.. py:data:: GAS_STORAGE_UPDATE

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 25-25


GAS_STORAGE_CLEAR_REFUND
~~~~~~~~~~~~~~~~~~~~~~~~



.. py:data:: GAS_STORAGE_CLEAR_REFUND

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 26-26


GAS_LOW
~~~~~~~



.. py:data:: GAS_LOW

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 27-27


GAS_MID
~~~~~~~



.. py:data:: GAS_MID

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 28-28


GAS_HIGH
~~~~~~~~



.. py:data:: GAS_HIGH

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 29-29


GAS_EXPONENTIATION
~~~~~~~~~~~~~~~~~~



.. py:data:: GAS_EXPONENTIATION

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 30-30


GAS_MEMORY
~~~~~~~~~~



.. py:data:: GAS_MEMORY

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 31-31


GAS_KECCAK256
~~~~~~~~~~~~~



.. py:data:: GAS_KECCAK256

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 32-32


GAS_KECCAK256_WORD
~~~~~~~~~~~~~~~~~~



.. py:data:: GAS_KECCAK256_WORD

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 33-33


GAS_COPY
~~~~~~~~



.. py:data:: GAS_COPY

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 34-34


GAS_BLOCK_HASH
~~~~~~~~~~~~~~



.. py:data:: GAS_BLOCK_HASH

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 35-35


GAS_EXTERNAL
~~~~~~~~~~~~



.. py:data:: GAS_EXTERNAL

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 36-36


GAS_BALANCE
~~~~~~~~~~~



.. py:data:: GAS_BALANCE

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 37-37


GAS_LOG
~~~~~~~



.. py:data:: GAS_LOG

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 38-38


GAS_LOG_DATA
~~~~~~~~~~~~



.. py:data:: GAS_LOG_DATA

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 39-39


GAS_LOG_TOPIC
~~~~~~~~~~~~~



.. py:data:: GAS_LOG_TOPIC

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 40-40


GAS_CREATE
~~~~~~~~~~



.. py:data:: GAS_CREATE

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 41-41


GAS_CODE_DEPOSIT
~~~~~~~~~~~~~~~~



.. py:data:: GAS_CODE_DEPOSIT

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 42-42


GAS_ZERO
~~~~~~~~



.. py:data:: GAS_ZERO

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 43-43


GAS_CALL
~~~~~~~~



.. py:data:: GAS_CALL

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 44-44


GAS_NEW_ACCOUNT
~~~~~~~~~~~~~~~



.. py:data:: GAS_NEW_ACCOUNT

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 45-45


GAS_CALL_VALUE
~~~~~~~~~~~~~~



.. py:data:: GAS_CALL_VALUE

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 46-46


GAS_CALL_STIPEND
~~~~~~~~~~~~~~~~



.. py:data:: GAS_CALL_STIPEND

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 47-47


GAS_SELF_DESTRUCT
~~~~~~~~~~~~~~~~~



.. py:data:: GAS_SELF_DESTRUCT

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 48-48


GAS_SELF_DESTRUCT_NEW_ACCOUNT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



.. py:data:: GAS_SELF_DESTRUCT_NEW_ACCOUNT

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 49-49


REFUND_SELF_DESTRUCT
~~~~~~~~~~~~~~~~~~~~



.. py:data:: REFUND_SELF_DESTRUCT

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 50-50


GAS_ECRECOVER
~~~~~~~~~~~~~



.. py:data:: GAS_ECRECOVER

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 51-51


GAS_SHA256
~~~~~~~~~~



.. py:data:: GAS_SHA256

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 52-52


GAS_SHA256_WORD
~~~~~~~~~~~~~~~



.. py:data:: GAS_SHA256_WORD

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 53-53


GAS_RIPEMD160
~~~~~~~~~~~~~



.. py:data:: GAS_RIPEMD160

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 54-54


GAS_RIPEMD160_WORD
~~~~~~~~~~~~~~~~~~



.. py:data:: GAS_RIPEMD160_WORD

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 55-55


GAS_IDENTITY
~~~~~~~~~~~~



.. py:data:: GAS_IDENTITY

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 56-56


GAS_IDENTITY_WORD
~~~~~~~~~~~~~~~~~



.. py:data:: GAS_IDENTITY_WORD

   

.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :lines: 57-57


subtract_gas
~~~~~~~~~~~~


.. function:: subtract_gas(gas_left: ethereum.base_types.U256, amount: ethereum.base_types.U256) -> ethereum.base_types.U256
   :noindexentry:

   Subtracts `amount` from `gas_left`.

   :param gas_left: The amount of gas left in the current frame.
   :param amount: The amount of gas the current operation requires.

   :raises ~ethereum.tangerine_whistle.vm.error.OutOfGasError: If `gas_left` is less than `amount`.




.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :pyobject: subtract_gas

calculate_memory_gas_cost
~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_memory_gas_cost(size_in_bytes: ethereum.base_types.Uint) -> ethereum.base_types.U256
   :noindexentry:

   Calculates the gas cost for allocating memory
   to the smallest multiple of 32 bytes,
   such that the allocated size is at least as big as the given size.

   :param size_in_bytes: The size of the data in bytes.

   :returns: **total_gas_cost** -- The gas cost for storing data in memory.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :pyobject: calculate_memory_gas_cost

calculate_gas_extend_memory
~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_gas_extend_memory(memory: bytearray, start_position: ethereum.base_types.Uint, size: ethereum.base_types.U256) -> ethereum.base_types.U256
   :noindexentry:

   Calculates the gas amount to extend memory

   :param memory: Memory contents of the EVM.
   :param start_position: Starting pointer to the memory.
   :param size: Amount of bytes by which the memory needs to be extended.

   :returns: **to_be_paid** -- returns `0` if size=0 or if the
             size after extending memory is less than the size before extending
             else it returns the amount that needs to be paid for extendinng memory.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :pyobject: calculate_gas_extend_memory

calculate_call_gas_cost
~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_call_gas_cost(gas: ethereum.base_types.U256, gas_left: ethereum.base_types.U256, extra_gas: ethereum.base_types.U256) -> ethereum.base_types.U256
   :noindexentry:

   Calculates the gas amount for executing Opcodes `CALL` and `CALLCODE`.

   :param gas: The amount of gas provided to the message-call.
   :param gas_left: The amount of gas left in the current frame.
   :param extra_gas: The amount of gas needed for transferring value + creating a new
                     account inside a message call.

   :returns: **call_gas_cost** -- The total gas amount for executing Opcodes `CALL` and `CALLCODE`.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :pyobject: calculate_call_gas_cost

calculate_message_call_gas_stipend
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_message_call_gas_stipend(value: ethereum.base_types.U256, gas: ethereum.base_types.U256, gas_left: ethereum.base_types.U256, extra_gas: ethereum.base_types.U256, call_stipend: ethereum.base_types.U256 = GAS_CALL_STIPEND) -> ethereum.base_types.U256
   :noindexentry:

   Calculates the gas stipend for making the message call
   with the given value.

   :param value: The amount of `ETH` that needs to be transferred.
   :param gas: The amount of gas provided to the message-call.
   :param gas_left: The amount of gas left in the current frame.
   :param extra_gas: The amount of gas needed for transferring value + creating a new
                     account inside a message call.
   :param call_stipend: The amount of stipend provided to a message call to execute code while
                        transferring value(ETH).

   :returns: **message_call_gas_stipend** -- The gas stipend for making the message-call.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :pyobject: calculate_message_call_gas_stipend

max_message_call_gas
~~~~~~~~~~~~~~~~~~~~


.. function:: max_message_call_gas(gas: ethereum.base_types.U256) -> ethereum.base_types.U256
   :noindexentry:

   Calculates the maximum gas that is allowed for making a message call

   :param gas: The amount of gas provided to the message-call.

   :returns: **max_allowed_message_call_gas** -- The maximum gas allowed for making the message-call.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/tangerine_whistle/vm/gas.py
   :language: python
   :pyobject: max_message_call_gas
